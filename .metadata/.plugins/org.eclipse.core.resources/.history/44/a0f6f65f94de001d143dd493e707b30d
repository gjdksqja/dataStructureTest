package dataStructure.tree;

import java.util.LinkedList;
import java.util.Queue;

// 이진 탐색 트리
public class BinarySearchTree {
	Node root;
	
	public void add(int key) {
		Node newNode = new Node();
		newNode.key = key;
		if(root == null) {
			root = newNode;
		} else {
			insertNode(newNode);
		}
	}
	
	private void insertNode(Node node) {
		Queue<Node> queue = new LinkedList<>();
		queue.offer(root);
		
		while(!queue.isEmpty()) {
			Node parentNode = queue.poll();
			
			// 우선 부모 노드와 비교 => 일단은 무조건 노드에 값이 있는 가정으로 간다.
			if (parentNode.key > node.key) { // 왼졲 노드로 가는 경우
				if(parentNode.left == null) {
					parentNode.left = node;
				} else {
					queue.add(parentNode.left);
					break;
				}
			} else { // 오른쪽 노드로 이동
				if(parentNode.right == null) {
					parentNode.right = node;
				} else {
					queue.add(node);
					break;
				}
			}
			
		}
		
	}
}
