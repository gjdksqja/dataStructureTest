package dataStructure;

public class DoublyLinkedList<T> {
	DoublyLinkedNode<T> head; // 첫번째 노드
	DoublyLinkedNode<T> last; // 마지막 노드
	int size = 0; // 크기
	
	public DoublyLinkedNode<T> findNode(int searchIndex) {
		// head에서 부터 하나씩 넘어가면서 찾아가야 함
		
	    /**
	     * 찾는 노드의 index가 음수거나
	     * 노드의 개수보다 많거나 같으면 예외를 발생시킨다.
	     */
	    if (0 > searchIndex || size <= searchIndex) {
	        throw new ArrayIndexOutOfBoundsException();
	    }
		
	    int nodeIndex = 0;
	    DoublyLinkedNode<T> pointer = head; // 처음부터 확인
	    
	    /**
	     * 찾는 노드의 index와 노드의 순서가 동일할 때 까지
	     * 노드의 참조값을 이용하여 이동한다.
	     */
	    while (nodeIndex != searchIndex) {
	        ++nodeIndex;
	        pointer = pointer.next;
	    }
	    
	    return pointer;
	}	
		
}
  