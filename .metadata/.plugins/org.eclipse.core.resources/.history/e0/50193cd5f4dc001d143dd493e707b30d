package dataStructure.recursion;

public final class MazeProblem {

    // 예시 : 미로 배열
    private final int[][] mazeArray = {
            {1, 1, 1, 1, 1, 1, 1, 1},
            {0, 0, 0, 0, 0, 0, 0, 1},
            {1, 1, 1, 0, 1, 1, 1, 1},
            {1, 0, 0, 0, 0, 0, 0, 0},
            {1, 1, 1, 1, 1, 1, 1, 1},
    };
    
    // 방문 확인 : 최초는 false임.
    private final boolean[][] mazeVisitArray = {
            {false, false, false, false, false, false, false, false},
            {false, false, false, false, false, false, false, false},
            {false, false, false, false, false, false, false, false},
            {false, false, false, false, false, false, false, false},
            {false, false, false, false, false, false, false, false}
    };
    
    private boolean isFinished = false;
    
    public MazeProblem () {
    	
    	// start 
    	int x = 0;
    	int y = 0;
    	
    	visit(x,y);

    }
    
    public void visit(int x , int y) { // x,y 좌표 평면
    	// 완료
    	if(isFinished) return;
    	
    	// 벽인진 확인
    	if(mazeArray[x][y] == 1) return;
    	
    	
    	// 완료 확인
    	if(x==7 && y==3) {
    		isFinished = true;
    	}
    	
    	// 이미 방문
    	if(mazeVisitArray[x][y] == true ) {
    		return;
    	}
    	
    	
    	mazeVisitArray[x][y] = true;
    	
    	// 상하좌우 이동
    	
    }
    
    
}