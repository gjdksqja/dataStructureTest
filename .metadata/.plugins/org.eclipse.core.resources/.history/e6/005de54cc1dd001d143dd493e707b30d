package dataStructure.tree;

import java.util.LinkedList;
import java.util.Queue;

public class NormalTree {
    Node root;

    public void addData(int key) {
        Node newNode = new Node();
        newNode.key = key;
        if (null == root) {
            root = newNode;
        } else {
            Queue<Node> queue = new LinkedList<>();
            queue.offer(root); // 삽입, add와 비슷
            
            // 이 방법은 왼쪽에서부터 채우는 방법으로, 참신한거 같은데 queue가 빌 떄까지 전부 다 확인해야 하는 방법임 => 개선 해봄
//            while (!queue.isEmpty()) {  
//                Node parentNode = queue.poll();
//                if (null != parentNode.left) {
//                    queue.offer(parentNode.left);
//                } else {
//                    parentNode.left = newNode;
//                    break;
//                }
//                if (null != parentNode.right) {
//                    queue.offer(parentNode.right);
//                } else {
//                    parentNode.right = newNode;
//                    break;
//                }
//            }
            Node parentNode = queue.poll(); // 최근 노드
            /* 
             * 노드 탑색을 이용하여 추가 할 것인가 말것인가로 갈 수 있을 듯  
             */ 
            
            
        }
    }
    
    private void visit(Node node) {
        System.out.printf("%d ", node.key);
    }    
}
